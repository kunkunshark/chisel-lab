circuit VendingMachine :
  module BcdTable :
    input clock : Clock
    input reset : Reset
    output io : { flip in : UInt<8>, out : UInt<8>}

    wire table : UInt<8>[100] @[Bcd.scala 9:19]
    table[0] <= UInt<1>("h0") @[Bcd.scala 12:14]
    table[1] <= UInt<1>("h1") @[Bcd.scala 12:14]
    table[2] <= UInt<2>("h2") @[Bcd.scala 12:14]
    table[3] <= UInt<2>("h3") @[Bcd.scala 12:14]
    table[4] <= UInt<3>("h4") @[Bcd.scala 12:14]
    table[5] <= UInt<3>("h5") @[Bcd.scala 12:14]
    table[6] <= UInt<3>("h6") @[Bcd.scala 12:14]
    table[7] <= UInt<3>("h7") @[Bcd.scala 12:14]
    table[8] <= UInt<4>("h8") @[Bcd.scala 12:14]
    table[9] <= UInt<4>("h9") @[Bcd.scala 12:14]
    table[10] <= UInt<5>("h10") @[Bcd.scala 12:14]
    table[11] <= UInt<5>("h11") @[Bcd.scala 12:14]
    table[12] <= UInt<5>("h12") @[Bcd.scala 12:14]
    table[13] <= UInt<5>("h13") @[Bcd.scala 12:14]
    table[14] <= UInt<5>("h14") @[Bcd.scala 12:14]
    table[15] <= UInt<5>("h15") @[Bcd.scala 12:14]
    table[16] <= UInt<5>("h16") @[Bcd.scala 12:14]
    table[17] <= UInt<5>("h17") @[Bcd.scala 12:14]
    table[18] <= UInt<5>("h18") @[Bcd.scala 12:14]
    table[19] <= UInt<5>("h19") @[Bcd.scala 12:14]
    table[20] <= UInt<6>("h20") @[Bcd.scala 12:14]
    table[21] <= UInt<6>("h21") @[Bcd.scala 12:14]
    table[22] <= UInt<6>("h22") @[Bcd.scala 12:14]
    table[23] <= UInt<6>("h23") @[Bcd.scala 12:14]
    table[24] <= UInt<6>("h24") @[Bcd.scala 12:14]
    table[25] <= UInt<6>("h25") @[Bcd.scala 12:14]
    table[26] <= UInt<6>("h26") @[Bcd.scala 12:14]
    table[27] <= UInt<6>("h27") @[Bcd.scala 12:14]
    table[28] <= UInt<6>("h28") @[Bcd.scala 12:14]
    table[29] <= UInt<6>("h29") @[Bcd.scala 12:14]
    table[30] <= UInt<6>("h30") @[Bcd.scala 12:14]
    table[31] <= UInt<6>("h31") @[Bcd.scala 12:14]
    table[32] <= UInt<6>("h32") @[Bcd.scala 12:14]
    table[33] <= UInt<6>("h33") @[Bcd.scala 12:14]
    table[34] <= UInt<6>("h34") @[Bcd.scala 12:14]
    table[35] <= UInt<6>("h35") @[Bcd.scala 12:14]
    table[36] <= UInt<6>("h36") @[Bcd.scala 12:14]
    table[37] <= UInt<6>("h37") @[Bcd.scala 12:14]
    table[38] <= UInt<6>("h38") @[Bcd.scala 12:14]
    table[39] <= UInt<6>("h39") @[Bcd.scala 12:14]
    table[40] <= UInt<7>("h40") @[Bcd.scala 12:14]
    table[41] <= UInt<7>("h41") @[Bcd.scala 12:14]
    table[42] <= UInt<7>("h42") @[Bcd.scala 12:14]
    table[43] <= UInt<7>("h43") @[Bcd.scala 12:14]
    table[44] <= UInt<7>("h44") @[Bcd.scala 12:14]
    table[45] <= UInt<7>("h45") @[Bcd.scala 12:14]
    table[46] <= UInt<7>("h46") @[Bcd.scala 12:14]
    table[47] <= UInt<7>("h47") @[Bcd.scala 12:14]
    table[48] <= UInt<7>("h48") @[Bcd.scala 12:14]
    table[49] <= UInt<7>("h49") @[Bcd.scala 12:14]
    table[50] <= UInt<7>("h50") @[Bcd.scala 12:14]
    table[51] <= UInt<7>("h51") @[Bcd.scala 12:14]
    table[52] <= UInt<7>("h52") @[Bcd.scala 12:14]
    table[53] <= UInt<7>("h53") @[Bcd.scala 12:14]
    table[54] <= UInt<7>("h54") @[Bcd.scala 12:14]
    table[55] <= UInt<7>("h55") @[Bcd.scala 12:14]
    table[56] <= UInt<7>("h56") @[Bcd.scala 12:14]
    table[57] <= UInt<7>("h57") @[Bcd.scala 12:14]
    table[58] <= UInt<7>("h58") @[Bcd.scala 12:14]
    table[59] <= UInt<7>("h59") @[Bcd.scala 12:14]
    table[60] <= UInt<7>("h60") @[Bcd.scala 12:14]
    table[61] <= UInt<7>("h61") @[Bcd.scala 12:14]
    table[62] <= UInt<7>("h62") @[Bcd.scala 12:14]
    table[63] <= UInt<7>("h63") @[Bcd.scala 12:14]
    table[64] <= UInt<7>("h64") @[Bcd.scala 12:14]
    table[65] <= UInt<7>("h65") @[Bcd.scala 12:14]
    table[66] <= UInt<7>("h66") @[Bcd.scala 12:14]
    table[67] <= UInt<7>("h67") @[Bcd.scala 12:14]
    table[68] <= UInt<7>("h68") @[Bcd.scala 12:14]
    table[69] <= UInt<7>("h69") @[Bcd.scala 12:14]
    table[70] <= UInt<7>("h70") @[Bcd.scala 12:14]
    table[71] <= UInt<7>("h71") @[Bcd.scala 12:14]
    table[72] <= UInt<7>("h72") @[Bcd.scala 12:14]
    table[73] <= UInt<7>("h73") @[Bcd.scala 12:14]
    table[74] <= UInt<7>("h74") @[Bcd.scala 12:14]
    table[75] <= UInt<7>("h75") @[Bcd.scala 12:14]
    table[76] <= UInt<7>("h76") @[Bcd.scala 12:14]
    table[77] <= UInt<7>("h77") @[Bcd.scala 12:14]
    table[78] <= UInt<7>("h78") @[Bcd.scala 12:14]
    table[79] <= UInt<7>("h79") @[Bcd.scala 12:14]
    table[80] <= UInt<8>("h80") @[Bcd.scala 12:14]
    table[81] <= UInt<8>("h81") @[Bcd.scala 12:14]
    table[82] <= UInt<8>("h82") @[Bcd.scala 12:14]
    table[83] <= UInt<8>("h83") @[Bcd.scala 12:14]
    table[84] <= UInt<8>("h84") @[Bcd.scala 12:14]
    table[85] <= UInt<8>("h85") @[Bcd.scala 12:14]
    table[86] <= UInt<8>("h86") @[Bcd.scala 12:14]
    table[87] <= UInt<8>("h87") @[Bcd.scala 12:14]
    table[88] <= UInt<8>("h88") @[Bcd.scala 12:14]
    table[89] <= UInt<8>("h89") @[Bcd.scala 12:14]
    table[90] <= UInt<8>("h90") @[Bcd.scala 12:14]
    table[91] <= UInt<8>("h91") @[Bcd.scala 12:14]
    table[92] <= UInt<8>("h92") @[Bcd.scala 12:14]
    table[93] <= UInt<8>("h93") @[Bcd.scala 12:14]
    table[94] <= UInt<8>("h94") @[Bcd.scala 12:14]
    table[95] <= UInt<8>("h95") @[Bcd.scala 12:14]
    table[96] <= UInt<8>("h96") @[Bcd.scala 12:14]
    table[97] <= UInt<8>("h97") @[Bcd.scala 12:14]
    table[98] <= UInt<8>("h98") @[Bcd.scala 12:14]
    table[99] <= UInt<8>("h99") @[Bcd.scala 12:14]
    node _io_out_T = bits(io.in, 6, 0)
    io.out <= table[_io_out_T] @[Bcd.scala 15:10]

  module SevenSegDec :
    input clock : Clock
    input reset : Reset
    output io : { flip in : UInt<4>, out : UInt<7>}

    wire sevSeg : UInt @[SevenSegDec.scala 10:27]
    sevSeg <= UInt<1>("h0") @[SevenSegDec.scala 10:27]
    node _T = eq(UInt<1>("h0"), io.in) @[SevenSegDec.scala 13:17]
    when _T : @[SevenSegDec.scala 13:17]
      sevSeg <= UInt<6>("h3f") @[SevenSegDec.scala 15:14]
    else :
      node _T_1 = eq(UInt<1>("h1"), io.in) @[SevenSegDec.scala 13:17]
      when _T_1 : @[SevenSegDec.scala 13:17]
        sevSeg <= UInt<3>("h6") @[SevenSegDec.scala 18:14]
      else :
        node _T_2 = eq(UInt<2>("h2"), io.in) @[SevenSegDec.scala 13:17]
        when _T_2 : @[SevenSegDec.scala 13:17]
          sevSeg <= UInt<7>("h5b") @[SevenSegDec.scala 21:14]
        else :
          node _T_3 = eq(UInt<2>("h3"), io.in) @[SevenSegDec.scala 13:17]
          when _T_3 : @[SevenSegDec.scala 13:17]
            sevSeg <= UInt<7>("h4f") @[SevenSegDec.scala 24:14]
          else :
            node _T_4 = eq(UInt<3>("h4"), io.in) @[SevenSegDec.scala 13:17]
            when _T_4 : @[SevenSegDec.scala 13:17]
              sevSeg <= UInt<7>("h66") @[SevenSegDec.scala 27:14]
            else :
              node _T_5 = eq(UInt<3>("h5"), io.in) @[SevenSegDec.scala 13:17]
              when _T_5 : @[SevenSegDec.scala 13:17]
                sevSeg <= UInt<7>("h6d") @[SevenSegDec.scala 30:14]
              else :
                node _T_6 = eq(UInt<3>("h6"), io.in) @[SevenSegDec.scala 13:17]
                when _T_6 : @[SevenSegDec.scala 13:17]
                  sevSeg <= UInt<7>("h7d") @[SevenSegDec.scala 33:14]
                else :
                  node _T_7 = eq(UInt<3>("h7"), io.in) @[SevenSegDec.scala 13:17]
                  when _T_7 : @[SevenSegDec.scala 13:17]
                    sevSeg <= UInt<3>("h7") @[SevenSegDec.scala 36:14]
                  else :
                    node _T_8 = eq(UInt<4>("h8"), io.in) @[SevenSegDec.scala 13:17]
                    when _T_8 : @[SevenSegDec.scala 13:17]
                      sevSeg <= UInt<7>("h7f") @[SevenSegDec.scala 39:14]
                    else :
                      node _T_9 = eq(UInt<4>("h9"), io.in) @[SevenSegDec.scala 13:17]
                      when _T_9 : @[SevenSegDec.scala 13:17]
                        sevSeg <= UInt<7>("h6f") @[SevenSegDec.scala 42:14]
                      else :
                        node _T_10 = eq(UInt<4>("ha"), io.in) @[SevenSegDec.scala 13:17]
                        when _T_10 : @[SevenSegDec.scala 13:17]
                          sevSeg <= UInt<7>("h77") @[SevenSegDec.scala 45:14]
                        else :
                          node _T_11 = eq(UInt<4>("hb"), io.in) @[SevenSegDec.scala 13:17]
                          when _T_11 : @[SevenSegDec.scala 13:17]
                            sevSeg <= UInt<7>("h7c") @[SevenSegDec.scala 48:14]
                          else :
                            node _T_12 = eq(UInt<4>("hc"), io.in) @[SevenSegDec.scala 13:17]
                            when _T_12 : @[SevenSegDec.scala 13:17]
                              sevSeg <= UInt<6>("h39") @[SevenSegDec.scala 51:14]
                            else :
                              node _T_13 = eq(UInt<4>("hd"), io.in) @[SevenSegDec.scala 13:17]
                              when _T_13 : @[SevenSegDec.scala 13:17]
                                sevSeg <= UInt<7>("h5e") @[SevenSegDec.scala 54:14]
                              else :
                                node _T_14 = eq(UInt<4>("he"), io.in) @[SevenSegDec.scala 13:17]
                                when _T_14 : @[SevenSegDec.scala 13:17]
                                  sevSeg <= UInt<7>("h79") @[SevenSegDec.scala 57:14]
                                else :
                                  node _T_15 = eq(UInt<4>("hf"), io.in) @[SevenSegDec.scala 13:17]
                                  when _T_15 : @[SevenSegDec.scala 13:17]
                                    sevSeg <= UInt<7>("h71") @[SevenSegDec.scala 60:14]
    io.out <= sevSeg @[SevenSegDec.scala 66:10]

  module VendingMachine :
    input clock : Clock
    input reset : UInt<1>
    output io : { flip price : UInt<5>, flip coin2 : UInt<1>, flip coin5 : UInt<1>, flip buy : UInt<1>, releaseCan : UInt<1>, alarm : UInt<1>, seg : UInt<7>, an : UInt<4>, coin2full : UInt<1>, coin5full : UInt<1>}

    wire sevSeg : UInt<7> @[VendingMachine.scala 21:32]
    sevSeg <= UInt<7>("h7f") @[VendingMachine.scala 21:32]
    wire select : UInt<4> @[VendingMachine.scala 22:32]
    select <= UInt<4>("h1") @[VendingMachine.scala 22:32]
    wire MuxOut : UInt<4> @[VendingMachine.scala 23:32]
    MuxOut <= UInt<4>("h0") @[VendingMachine.scala 23:32]
    reg sum : UInt<8>, clock with :
      reset => (reset, UInt<8>("h0")) @[VendingMachine.scala 25:25]
    reg state : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[VendingMachine.scala 26:25]
    reg numberc2 : UInt<5>, clock with :
      reset => (reset, UInt<5>("h0")) @[VendingMachine.scala 29:25]
    reg numberc5 : UInt<5>, clock with :
      reset => (reset, UInt<5>("h0")) @[VendingMachine.scala 30:25]
    reg counterClock : UInt<17>, clock with :
      reset => (reset, UInt<17>("h0")) @[VendingMachine.scala 32:29]
    reg counterAn : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[VendingMachine.scala 33:29]
    inst bcdConv of BcdTable @[VendingMachine.scala 35:26]
    bcdConv.clock <= clock
    bcdConv.reset <= reset
    inst SevSegConv of SevenSegDec @[VendingMachine.scala 36:26]
    SevSegConv.clock <= clock
    SevSegConv.reset <= reset
    reg add2_REG : UInt<1>, clock with :
      reset => (UInt<1>("h0"), add2_REG) @[VendingMachine.scala 38:33]
    add2_REG <= io.coin2 @[VendingMachine.scala 38:33]
    node _add2_T = eq(add2_REG, UInt<1>("h0")) @[VendingMachine.scala 38:25]
    node add2 = and(io.coin2, _add2_T) @[VendingMachine.scala 38:23]
    reg add5_REG : UInt<1>, clock with :
      reset => (UInt<1>("h0"), add5_REG) @[VendingMachine.scala 39:33]
    add5_REG <= io.coin5 @[VendingMachine.scala 39:33]
    node _add5_T = eq(add5_REG, UInt<1>("h0")) @[VendingMachine.scala 39:25]
    node add5 = and(io.coin5, _add5_T) @[VendingMachine.scala 39:23]
    io.alarm <= UInt<1>("h0") @[VendingMachine.scala 41:17]
    io.releaseCan <= UInt<1>("h0") @[VendingMachine.scala 42:17]
    io.coin2full <= UInt<1>("h0") @[VendingMachine.scala 43:17]
    io.coin5full <= UInt<1>("h0") @[VendingMachine.scala 44:17]
    node _T = eq(UInt<1>("h0"), state) @[VendingMachine.scala 47:18]
    when _T : @[VendingMachine.scala 47:18]
      io.alarm <= UInt<1>("h0") @[VendingMachine.scala 49:16]
      io.releaseCan <= UInt<1>("h0") @[VendingMachine.scala 50:21]
      node _T_1 = gt(numberc2, UInt<5>("h13")) @[VendingMachine.scala 51:21]
      node _T_2 = gt(numberc5, UInt<5>("h13")) @[VendingMachine.scala 51:39]
      node _T_3 = or(_T_1, _T_2) @[VendingMachine.scala 51:28]
      when _T_3 : @[VendingMachine.scala 51:47]
        state <= UInt<3>("h6") @[VendingMachine.scala 52:15]
      else :
        node _T_4 = lt(sum, UInt<5>("h1e")) @[VendingMachine.scala 53:29]
        node _T_5 = and(add2, _T_4) @[VendingMachine.scala 53:23]
        when _T_5 : @[VendingMachine.scala 53:37]
          state <= UInt<1>("h1") @[VendingMachine.scala 54:15]
        else :
          node _T_6 = lt(sum, UInt<5>("h1b")) @[VendingMachine.scala 55:29]
          node _T_7 = and(add5, _T_6) @[VendingMachine.scala 55:23]
          when _T_7 : @[VendingMachine.scala 55:37]
            state <= UInt<2>("h2") @[VendingMachine.scala 56:15]
          else :
            node _T_8 = lt(sum, io.price) @[VendingMachine.scala 57:31]
            node _T_9 = and(io.buy, _T_8) @[VendingMachine.scala 57:25]
            when _T_9 : @[VendingMachine.scala 57:43]
              state <= UInt<2>("h3") @[VendingMachine.scala 58:15]
            else :
              node _T_10 = geq(sum, io.price) @[VendingMachine.scala 59:31]
              node _T_11 = and(io.buy, _T_10) @[VendingMachine.scala 59:25]
              when _T_11 : @[VendingMachine.scala 59:44]
                state <= UInt<3>("h4") @[VendingMachine.scala 60:15]
    else :
      node _T_12 = eq(UInt<1>("h1"), state) @[VendingMachine.scala 47:18]
      when _T_12 : @[VendingMachine.scala 47:18]
        node _sum_T = add(sum, UInt<2>("h2")) @[VendingMachine.scala 64:18]
        node _sum_T_1 = tail(_sum_T, 1) @[VendingMachine.scala 64:18]
        sum <= _sum_T_1 @[VendingMachine.scala 64:11]
        node _numberc2_T = add(numberc2, UInt<1>("h1")) @[VendingMachine.scala 65:28]
        node _numberc2_T_1 = tail(_numberc2_T, 1) @[VendingMachine.scala 65:28]
        numberc2 <= _numberc2_T_1 @[VendingMachine.scala 65:16]
        state <= UInt<1>("h0") @[VendingMachine.scala 66:13]
      else :
        node _T_13 = eq(UInt<2>("h2"), state) @[VendingMachine.scala 47:18]
        when _T_13 : @[VendingMachine.scala 47:18]
          node _sum_T_2 = add(sum, UInt<3>("h5")) @[VendingMachine.scala 69:18]
          node _sum_T_3 = tail(_sum_T_2, 1) @[VendingMachine.scala 69:18]
          sum <= _sum_T_3 @[VendingMachine.scala 69:11]
          node _numberc5_T = add(numberc5, UInt<1>("h1")) @[VendingMachine.scala 70:28]
          node _numberc5_T_1 = tail(_numberc5_T, 1) @[VendingMachine.scala 70:28]
          numberc5 <= _numberc5_T_1 @[VendingMachine.scala 70:16]
          state <= UInt<1>("h0") @[VendingMachine.scala 71:13]
        else :
          node _T_14 = eq(UInt<2>("h3"), state) @[VendingMachine.scala 47:18]
          when _T_14 : @[VendingMachine.scala 47:18]
            io.alarm <= UInt<1>("h1") @[VendingMachine.scala 74:16]
            node _T_15 = eq(io.buy, UInt<1>("h0")) @[VendingMachine.scala 75:12]
            when _T_15 : @[VendingMachine.scala 75:21]
              state <= UInt<1>("h0") @[VendingMachine.scala 76:15]
          else :
            node _T_16 = eq(UInt<3>("h4"), state) @[VendingMachine.scala 47:18]
            when _T_16 : @[VendingMachine.scala 47:18]
              node _sum_T_4 = sub(sum, io.price) @[VendingMachine.scala 80:18]
              node _sum_T_5 = tail(_sum_T_4, 1) @[VendingMachine.scala 80:18]
              sum <= _sum_T_5 @[VendingMachine.scala 80:11]
              state <= UInt<3>("h5") @[VendingMachine.scala 81:13]
            else :
              node _T_17 = eq(UInt<3>("h5"), state) @[VendingMachine.scala 47:18]
              when _T_17 : @[VendingMachine.scala 47:18]
                io.releaseCan <= UInt<1>("h1") @[VendingMachine.scala 84:21]
                node _T_18 = eq(io.buy, UInt<1>("h0")) @[VendingMachine.scala 85:12]
                when _T_18 : @[VendingMachine.scala 85:21]
                  state <= UInt<1>("h0") @[VendingMachine.scala 86:15]
              else :
                node _T_19 = eq(UInt<3>("h6"), state) @[VendingMachine.scala 47:18]
                when _T_19 : @[VendingMachine.scala 47:18]
                  io.alarm <= UInt<1>("h1") @[VendingMachine.scala 90:16]
    node _T_20 = eq(counterClock, UInt<17>("h186a0")) @[VendingMachine.scala 95:21]
    when _T_20 : @[VendingMachine.scala 95:35]
      counterClock <= UInt<1>("h0") @[VendingMachine.scala 96:18]
      node _counterAn_T = add(counterAn, UInt<1>("h1")) @[VendingMachine.scala 97:28]
      node _counterAn_T_1 = tail(_counterAn_T, 1) @[VendingMachine.scala 97:28]
      counterAn <= _counterAn_T_1 @[VendingMachine.scala 97:15]
    else :
      node _counterClock_T = add(counterClock, UInt<1>("h1")) @[VendingMachine.scala 99:34]
      node _counterClock_T_1 = tail(_counterClock_T, 1) @[VendingMachine.scala 99:34]
      counterClock <= _counterClock_T_1 @[VendingMachine.scala 99:18]
    bcdConv.io.in is invalid @[VendingMachine.scala 103:17]
    node _T_21 = eq(UInt<1>("h0"), counterAn) @[VendingMachine.scala 104:21]
    when _T_21 : @[VendingMachine.scala 104:21]
      bcdConv.io.in <= io.price @[VendingMachine.scala 106:21]
      select <= UInt<1>("h1") @[VendingMachine.scala 107:14]
      node _MuxOut_T = bits(bcdConv.io.out, 3, 0) @[VendingMachine.scala 108:31]
      MuxOut <= _MuxOut_T @[VendingMachine.scala 108:14]
    else :
      node _T_22 = eq(UInt<1>("h1"), counterAn) @[VendingMachine.scala 104:21]
      when _T_22 : @[VendingMachine.scala 104:21]
        bcdConv.io.in <= io.price @[VendingMachine.scala 111:21]
        select <= UInt<2>("h2") @[VendingMachine.scala 112:14]
        node _MuxOut_T_1 = bits(bcdConv.io.out, 7, 4) @[VendingMachine.scala 113:31]
        MuxOut <= _MuxOut_T_1 @[VendingMachine.scala 113:14]
      else :
        node _T_23 = eq(UInt<2>("h2"), counterAn) @[VendingMachine.scala 104:21]
        when _T_23 : @[VendingMachine.scala 104:21]
          bcdConv.io.in <= sum @[VendingMachine.scala 116:21]
          select <= UInt<3>("h4") @[VendingMachine.scala 117:14]
          node _MuxOut_T_2 = bits(bcdConv.io.out, 3, 0) @[VendingMachine.scala 118:31]
          MuxOut <= _MuxOut_T_2 @[VendingMachine.scala 118:14]
        else :
          node _T_24 = eq(UInt<2>("h3"), counterAn) @[VendingMachine.scala 104:21]
          when _T_24 : @[VendingMachine.scala 104:21]
            bcdConv.io.in <= sum @[VendingMachine.scala 121:21]
            select <= UInt<4>("h8") @[VendingMachine.scala 122:14]
            node _MuxOut_T_3 = bits(bcdConv.io.out, 7, 4) @[VendingMachine.scala 123:31]
            MuxOut <= _MuxOut_T_3 @[VendingMachine.scala 123:14]
    SevSegConv.io.in <= MuxOut @[VendingMachine.scala 127:20]
    sevSeg <= SevSegConv.io.out @[VendingMachine.scala 128:10]
    node _io_seg_T = not(sevSeg) @[VendingMachine.scala 129:13]
    io.seg <= _io_seg_T @[VendingMachine.scala 129:10]
    node _io_an_T = not(select) @[VendingMachine.scala 130:13]
    io.an <= _io_an_T @[VendingMachine.scala 130:10]

